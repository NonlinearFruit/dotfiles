#!/usr/bin/env nu

# Tool for chatting with the rogues and clones that are in your tmux server
# TODO
# - unread count in status bar
# - stdin
# - multiline in tmux prompt
# - graceful quit when following
# - scrolling
# - send message while popup is up
# Requires:
# - cargo install nu_plugin_emoji
# - nu -c 'plugin add nu_plugin_emoji'
def main [
  message = ""        # Message to post
  --list-messages(-l) # Print the messages
  --limit = 0         # Limit how many messages to show
  --follow(-f)        # Continuously print messages
  --user(-u):string   # User name to use
  --unread-message-count(-c)       # Get number of unread messages
  --server(-s) = "~/.chat-history" # File used for persistence
] {
  mut user = $user | default (^tmux display-message -p "#{session_name}")
  mut server = $server | path expand
  if $message != "" {
    post-message $server $user $message
  }
  if $list_messages and $follow {
    follow-messages $server $user $limit
  } else if $list_messages {
    list-messages $server $user $limit (get-last-read $server $user)
  } else if $unread_message_count {
    unread-count $server $user
  }
}

def post-message [server user message] {
  plugin use emoji
  $message
  | parse -r '(?<emoji>:[^:\s]+:)'
  | get emoji
  | uniq
  | reduce --fold $message {|shortcode accumulator|
    $accumulator
    | str replace --all $shortcode (emoji $shortcode)
  }
  | {
    id: (random uuid -v 7)
    date: (date now)
    user: $user
    message: $in
  }
  | to json
  | save -a $server
}

def follow-messages [server user limit] {
  let last_read = get-last-read $server $user
  mut old_messages = list-messages $server $user $limit $last_read
  print $old_messages
  loop {
    let messages = list-messages $server $user $limit $last_read
    if $messages != $old_messages {
      clear
      print $messages
      $old_messages = $messages
    }
    sleep 300ms
  }
}

def list-messages [server user limit last_read] {
  if ($server | path exists | not $in) {
    return ""
  }
  open $server
  | jq --slurp
  | from json
  | if $limit < 1 {
    $in
  } else {
    last $limit
  }
  | insert human_date {
    $in.date
    | date humanize
    | str replace -r '\d+ seconds? ago' 'now'
    | str replace -r '^\D*\d minutes? ago$' 'a few minutes ago'
    | str replace -r '(\d)\d minutes ago' '${1}0 minutes ago'
  }
  | update-last-read $server $user $last_read
  | insert displayable_message { format-message $in $last_read }
  | better-group-by human_date
  | each {|group|
    format-message-group
  }
  | flatten
  | last (term size | get rows)
  | to text
}

def load-messages [server] {
  open $server
  | jq --slurp
  | from json
}

def unread-count [server user] {
  let last_read = get-last-read $server $user
  load-messages $server
  | skip until {|msg| $msg.id == $last_read }
  | where user != $user
  | length
  | if $in == 0 { $in } else { $in - 1 }
}

def format-message-group [] {
  let group = $in
  $group.items
  | each {|msg|
    $msg.displayable_message
  }
  | append (group-heading $group)
}

def group-heading [group] {
  $group.human_date
  | fill --alignment r --width (term size | get columns)
}

def format-message [message last_read] {
  $"($message.user | into-color)($message.user)(ansi reset): ($message.message)"
  | if $message.id == $last_read and not $message.is_latest_message {
    append (format-last-read)
    | to text
  } else {
    $in
  }
}

def format-last-read [] {
  "last read"
  | fill --alignment c --width (term size | get columns) --character -
}

def update-last-read [server user last_read] {
  let msgs = $in
  if ($msgs | is-empty) {
    return $msgs
  }
  let latest_message = $msgs
  | last
  | get id

  if $latest_message != $last_read {
    set-last-read $server $user $latest_message
  }

  $msgs
  | insert is_latest_message { $in.id == $latest_message }
}

def get-last-read [server user] {
  $"($server)-last-read-($user)"
  | if ($in | path exists) {
    open $in
  } else {
    null
  }
}

def set-last-read [server user id] {
  $id
  | save -f $"($server)-last-read-($user)"
}

def into-color [] {
  split row ''
  | reduce --fold 0 {|character accumulator|
    $accumulator + ($character | into binary | into int)
  }
  | do {|index|
    [
      (ansi blue)
      (ansi cyan)
      (ansi green)
      (ansi magenta)
      (ansi purple)
      (ansi red)
      (ansi yellow)
    ]
    | get ($index mod ($in | length))
  } $in
}

def better-group-by [cell:cell-path] {
  if ($in | is-empty) {
    $in
  } else {
    group-by $cell --to-table
  }
}
