#!/usr/bin/env nu

# Tool for chatting with the rogues and clones that are in your tmux server
def main [
  message = ""        # Message to post
  --list-messages(-l) # Print the messages
  --limit = 0         # Limit how many messages to show
  --follow(-f)        # Continuously print messages
  --user(-u):string   # User name to use
  --server(-s) = "~/.chat-history" # File used for persistence
] {
  let session = $user | default (^tmux display-message -p "#{session_name}")
  mut server = $server | path expand
  if $message != "" {
    post-message $server $session $message
  }
  if $list_messages and $follow {
    follow-messages $server $limit
  } else if $list_messages {
    list-messages $server $limit
  }
}

def post-message [server session message] {
  {
    date: (date now)
    session: $session
    message: $message
  }
  | to json
  | save -a $server
}

def follow-messages [server limit] {
  loop {
    let messages = list-messages $server $limit
    clear
    print $messages
    sleep 300ms
  }
}

def list-messages [server limit] {
  open $server
  | jq --slurp
  | from json
  | if $limit < 1 {
    $in
  } else {
    last $limit
  }
  | insert human_date { $in.date | date humanize }
  | insert displayable_message { format-message $in }
  | group-by human_date --to-table
  | each {|group|
    $group.human_date
    | fill --alignment r --width (term size | get columns)
    | prepend $group.items.displayable_message
  }
  | flatten
  | to text
}

def format-message [message] {
  $"($message.session | into-color)($message.session)(ansi reset): ($message.message)"
}

def into-color [] {
  split row ''
  | reduce --fold 0 {|character accumulator|
    $accumulator + ($character | into binary | into int)
  }
  | do {|index|
    [
      (ansi blue)
      (ansi cyan)
      (ansi green)
      (ansi magenta)
      (ansi purple)
      (ansi red)
      (ansi yellow)
    ]
    | get ($index mod ($in | length))
  } $in
}
