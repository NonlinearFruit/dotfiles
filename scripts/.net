#!/bin/env nu

use std log

def --wrapped main [
  verb
  --raw
  --json
  ...rest
] {
  if (which dotnet | is-empty) {
    log error "`dotnet` not on path"
    return
  }
  
  match $verb {
    "build" => { build $raw $json $rest }
    _ => { dotnet $verb ...$rest }
  }
}

def build [
  raw
  json
  rest
] {
  let input = dotnet build ...$rest
  if ($raw) {
    return $input
  }
  let results =  $input | lines | uniq
  let base_directory = find-base-directory (pwd)
  let projects = $results
  | parse "  {name} -> {dll}"
  | each {|project|
    {
      project: $project.name
    }
  }
  
  let messages = $results
  | parse "{path}({line},{column}): {level} {code}: {message} [{project}]"
  | update path {|it|
    $it.path
    | if ($in | str starts-with $base_directory) {
      path relative-to $base_directory
    } else {
      $in
    }
  }
  | update project {|it| $it.project | path basename | parse "{name}.{language}proj" | get 0.name }
  $messages
  | group-by project
  | transpose project messages
  | join --outer $projects project
  | if ($json) {
    to json
  } else {
    each {|project| project-to-string $project}
    | flatten
    | str join (char newline)
  }
}

def project-to-string [project] {
  $project.messages?
  | group-by level
  | transpose level messages
  | each {|level| level-to-string $level}
  | prepend $project.project
  | flatten
}

def level-to-string [level] {
  let count = $level.messages | length
  $level.messages
  | group-by message
  | transpose code messages
  | each {|code| code-to-string $code}
  | prepend $"  ($count) ($level.level)"
  | flatten
}

def code-to-string [code] {
  let count = $code.messages | length
  $code.messages
  | each {|message| message-to-string $message}
  | prepend $"    ($count) ($code.code)"
  | flatten
}

def message-to-string [message] {
  $"      ($message.path)\(($message.line),($message.column))"
}

def find-base-directory [directory] {
  generate $directory {|dir|
    let parent = up-a-directory $dir
    if $dir == $parent {
      { out: $dir }
    } else {
      { out: $parent, next: $parent }
    }
  }
  | prepend $directory
  | skip while {|dir| not (is-base-directory $dir)}
  | get -i 0
  | default "/"
}

def up-a-directory [directory] {
  $directory | append ".." | path join | path expand
}

def is-base-directory [directory] {
  $directory | append .git | path join | path exists
}
