#!/usr/bin/env nu
# Random Word Generator
# Inspired by:
#      - https://linuxconfig.org/random-word-generator
#      - http://stackoverflow.com/a/14203146/4769802
#      - http://www.unix.com/shell-programming-and-scripting/156551-check-whether-string-begin-uppercase-lowercase-digit.html

# Outputs random (cryptographically secure) words from ~/scripts/words.txt
def main [
    --with-entropy            # Include the entropy of the generated words
    --as-json                 # Print as json
    number_of_words?: int = 1 # Number of words to generate
  ] {
  let all_words = get-all-words
  let total_options = $all_words | length
  generate-words $number_of_words $all_words
  | {
    words: $in
  }
  | if $with_entropy {
    insert entropy (calculate-entropy $number_of_words $total_options)
  } else {
    $in
  }
  | if $as_json {
    to json
  } else {
    try-print-entropy $total_options
    | get words
    | to text
  }
}

def get-all-words [] {
  "~/scripts/words.txt"
  | path expand
  | open $in
  | lines
}

def generate-words [number_of_words all_words] {
  if $number_of_words < 0 {
    return []
  }
  1..$number_of_words
  | each {
    $all_words
    | get (random-number ($all_words | length))
  }
}

def calculate-entropy [$number_of_words $total_options] {
  $total_options
  | math log 2
  | $in * $number_of_words
  | math round --precision 3
}

def try-print-entropy [total_options] {
  tee {
    if $in.entropy? != null {
       print $"($in.words | length) word\(s) out of ($total_options) produces ($in.entropy) bits of entropy."
    }
  }
}

def random-number [max: int = 10] {
    let max_int = 16777216
    od -N3 -An -i /dev/urandom
    | into int
    | $in * $max / $max_int
    | math round
}
