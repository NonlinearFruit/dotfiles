#!/usr/bin/env bb

; Requires on path
; - bb (https://github.com/babashka/babashka)
; - bat (https://github.com/sharkdp/bat)
; - fzf (https://github.com/junegunn/fzf)
(require '[clojure.java.io :as io])
(require '[clojure.string :as string])
(require '[clojure.java.shell :refer [sh]])
(require '[cheshire.core :as cheshire])
(require '[babashka.fs :as fs])

(def clj-docs-uri "https://clojuredocs.org/clojuredocs-export.json")

(def clj-docs-cache (fs/xdg-cache-home "cljue"))

(def clj-docs-json (fs/file clj-docs-cache "clojure-docs.json"))

(defn bat [stdin]
  (:out (sh "bat" "--color" "always" "--language" "clojure" "--plain" :in stdin)))

(defn cat [file]
  (string/join "\n" (fs/read-all-lines file)))

(defn fzf [stdin]
  (string/trim (:out (sh
          "fzf" "--ansi" "--preview" (str *file* " {}")
          :in stdin))))

(defn clj-doc-json-exists? []
  (fs/exists? clj-docs-json))

(defn download-clj-docs []
  (println "Downloading clj docs")
  (fs/create-dirs clj-docs-cache)
  (with-open [in (io/input-stream clj-docs-uri)
              out (io/output-stream clj-docs-json)]
    (io/copy in out)))

(defn download-clj-docs-if-necessary []
  (when-not (clj-doc-json-exists?)
    (download-clj-docs)))

(defn clj-docs []
  "Expected structure is {vars: [{ns: string, name: string, examples: [{body: string}]}]}"
  (cheshire/parse-string (cat clj-docs-json) true))

(defn clj-doc [ns name]
  (first (filter #(and (= (:ns %) ns)
                       (= (:name %) name))
                 (:vars (clj-docs)))))

(defn format-examples [clj_doc_examples]
  (bat (string/join "\n\n\n"
                    (map-indexed #(str "; Example #" %1 "\n" (string/trim (:body %2)))
                                 clj_doc_examples))))

(defn examples [thing] 
  (let [input (string/split thing #"/" 2)
             ns (first input)
             name (last input)]
    (format-examples (:examples (clj-doc ns name)))))

(defn search []
  (fzf (string/join "\n"
                    (map #(str (:ns %) "/" (:name %))
                         (:vars (clj-docs))))))

(defn -main [& args]
  (download-clj-docs-if-necessary)
  (print (if (empty? args)
    (examples (search))
    (examples (first args)))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
